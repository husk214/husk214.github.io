{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "85a18a40-50e2-4450-9ac6-84a3723832e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools\n",
    "import tensorflow as tf\n",
    "\n",
    "def ot_sinkhorn(C, a, b, eps, itr):\n",
    "    K = tf.exp(-C / eps)\n",
    "    u = tf.ones_like(a)\n",
    "    for _ in range(itr):\n",
    "        v = b / tf.linalg.matvec(tf.transpose(K),u)\n",
    "        u = a / tf.linalg.matvec(K,v)\n",
    "    P = tf.reshape(u, (-1,1))*(K * tf.reshape(v, (1,-1)))\n",
    "    return u, v, P\n",
    "\n",
    "def ot_sort(x, eps=0.1, itr=10):\n",
    "    l = x.shape[0]\n",
    "    y = (\n",
    "        tf.math.reduce_min(x)\n",
    "        + (tf.range(l, dtype=tf.float32) * tf.math.reduce_max(x) / l)\n",
    "    )\n",
    "    # stop_gradient(y)\n",
    "    C = (\n",
    "        tf.repeat(y[None, :], l, axis=0)\n",
    "        - tf.transpose(tf.repeat(x[None, :], l, axis=0))\n",
    "    ) ** 2\n",
    "    \n",
    "    a = tf.ones_like(x) / l\n",
    "    b = tf.ones_like(y) / l\n",
    "    \n",
    "    _, _, P = ot_sinkhorn(C, a, b, eps, itr)\n",
    "    b_hat = tf.cumsum(b, axis=0)\n",
    "    r = l**2 * tf.linalg.matvec(P, b_hat)\n",
    "    s = l * tf.linalg.matvec(tf.transpose(P), x)\n",
    "    return r, s    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "25641ce9-2363-438e-9fa7-97ce7d067c17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = [6.5 0.4 1.5 3.8]\n",
      "(eps, iter) = ('1.00', 10) , rank(x) = [3.9968197 1.1420645 1.8819754 3.0264602] , sort(x) = [0.5554942 1.3809325 3.6119862 6.6515865]\n",
      "(eps, iter) = ('1.00', 3) , rank(x) = [3.9989045 1.1250924 1.852144  3.0912457] , sort(x) = [0.5925583 1.3958677 3.2627218 6.9488516]\n",
      "(eps, iter) = ('1.00', 1) , rank(x) = [3.9995468 1.0959185 1.8018402 3.209512 ] , sort(x) = [0.67236686 1.3496025  2.7493653  7.428665  ]\n",
      "(eps, iter) = ('0.50', 10) , rank(x) = [3.9999995 1.0188777 1.9609721 3.0395496] , sort(x) = [0.45122853 1.4556235  3.6357753  6.6573734 ]\n",
      "(eps, iter) = ('0.50', 3) , rank(x) = [3.9999998 1.0119616 1.9392414 3.0985885] , sort(x) = [0.48653013 1.4220234  3.408082   6.883364  ]\n",
      "(eps, iter) = ('0.50', 1) , rank(x) = [3.9999995 1.009408  1.923769  3.167692 ] , sort(x) = [0.51072514 1.3990191  3.1431413  7.1471143 ]\n",
      "(eps, iter) = ('0.10', 10) , rank(x) = [3.9999998 1.        1.9999944 3.0011442] , sort(x) = [0.40000835 1.4999917  3.7956526  6.504347  ]\n",
      "(eps, iter) = ('0.10', 3) , rank(x) = [4.        1.        1.9999944 3.0011625] , sort(x) = [0.40000835 1.4999917  3.7955813  6.5044184 ]\n",
      "(eps, iter) = ('0.10', 1) , rank(x) = [3.9999998 1.        1.9999944 3.001168 ] , sort(x) = [0.40000835 1.4999917  3.7955608  6.5044384 ]\n",
      "(eps, iter) = ('0.02', 10) , rank(x) = [4. 1. 2. 3.] , sort(x) = [0.4 1.5 3.8 6.5]\n",
      "(eps, iter) = ('0.02', 3) , rank(x) = [4. 1. 2. 3.] , sort(x) = [0.4 1.5 3.8 6.5]\n",
      "(eps, iter) = ('0.02', 1) , rank(x) = [4. 1. 2. 3.] , sort(x) = [0.4 1.5 3.8 6.5]\n",
      "(eps, iter) = ('0.01', 10) , rank(x) = [nan nan nan nan] , sort(x) = [nan nan nan nan]\n",
      "(eps, iter) = ('0.01', 3) , rank(x) = [nan nan nan nan] , sort(x) = [nan nan nan nan]\n",
      "(eps, iter) = ('0.01', 1) , rank(x) = [nan nan nan nan] , sort(x) = [nan nan nan nan]\n"
     ]
    }
   ],
   "source": [
    "x = tf.constant([6.5, 0.4, 1.5, 3.8,])\n",
    "print(\"x =\", x.numpy())\n",
    "\n",
    "for eps, itr in itertools.product([1.0, 0.5, 0.1, 0.02, 0.01], [10, 3, 1]):\n",
    "    r, s = ot_sort(x, eps, itr)\n",
    "    print(\n",
    "        \"(eps, iter) =\", (format(eps, '.2f'), itr),\n",
    "        \", rank(x) =\", r.numpy(),\n",
    "        \", sort(x) =\", s.numpy(),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "935f71ea-ff86-45f3-8485-5fa3fd55f15c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# batch, desc order対応版\n",
    "\n",
    "def _t(x):\n",
    "    return tf.transpose(x, perm=[0, 2, 1])\n",
    "\n",
    "def _e(x):\n",
    "    return tf.expand_dims(x,axis=1)\n",
    "\n",
    "def ot_sinkhorn_batch(C, a, b, eps, itr):\n",
    "    K = tf.exp(-C / eps)\n",
    "    u = tf.ones_like(a)\n",
    "    for _ in range(itr):\n",
    "        v = b / tf.linalg.matvec(_t(K),u)\n",
    "        u = a / tf.linalg.matvec(K,v)\n",
    "    P = _e(u) * (K * _e(v))\n",
    "    return u, v, P\n",
    "\n",
    "def ot_sort_batch(x, eps=0.1, itr=10, desc_order=False):\n",
    "    l = x.shape[1]\n",
    "    m = x.shape[0]\n",
    "    i = tf.range(l, dtype=tf.float32)\n",
    "    \n",
    "    y = (\n",
    "        tf.math.reduce_min(x, axis=1)[:, None]\n",
    "        + tf.repeat(i[None, :], m, axis=0)\n",
    "        * tf.math.reduce_max(x, axis=1)[:, None] / l\n",
    "    )\n",
    "    if desc_order:\n",
    "        y = tf.reverse(y, [-1])\n",
    "    # stop_gradient(y)\n",
    "    C = (\n",
    "        tf.repeat(_e(y), l, axis=1)\n",
    "        - _t(tf.repeat(_e(x), l, axis=1))\n",
    "    ) ** 2\n",
    "\n",
    "    a = tf.ones_like(x) / l\n",
    "    b = tf.ones_like(x) / l\n",
    "    _, _, P = ot_sinkhorn_batch(C, a, b, eps, itr)\n",
    "    b_hat = tf.cumsum(b, axis=1)\n",
    "    r = l**2 * tf.linalg.matvec(P, b_hat)\n",
    "    s = l * tf.linalg.matvec(_t(P), x)\n",
    "    return r, s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3f551966-c3cb-4b65-8ee5-c9b1e8b626c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = tf.Tensor(\n",
      "[[6.5 0.4 1.5 3.8]\n",
      " [9.  1.  5.  3. ]], shape=(2, 4), dtype=float32)\n",
      "rank(x) = tf.Tensor(\n",
      "[[3.9084735 1.011591  2.0002186 3.0358374]\n",
      " [4.        1.        3.        2.       ]], shape=(2, 4), dtype=float32)\n",
      "sort(x) = tf.Tensor(\n",
      "[[0.40464482 1.5001597  3.8395972  6.3556166 ]\n",
      " [1.         3.         5.         9.        ]], shape=(2, 4), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "x = tf.constant([[6.5, 0.4, 1.5, 3.8,], [9,1,5,3,]])\n",
    "r,s = ot_sort_batch(x)\n",
    "print(\"x =\", x)\n",
    "print(\"rank(x) =\", r)\n",
    "print(\"sort(x) =\", s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ab5860ee-69c1-406c-9707-395009416440",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x = tf.Tensor(\n",
      "[[6.5 0.4 1.5 3.8]\n",
      " [9.  1.  5.  3. ]], shape=(2, 4), dtype=float32)\n",
      "rank(x) = tf.Tensor(\n",
      "[[0.99999994 3.9537764  3.0000052  2.022238  ]\n",
      " [1.         4.         2.         3.        ]], shape=(2, 4), dtype=float32)\n",
      "sort(x) = tf.Tensor(\n",
      "[[6.504449  3.8400276 1.4999917 0.3953859]\n",
      " [9.        5.        3.        1.       ]], shape=(2, 4), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "r,s = ot_sort_batch(x, desc_order=True)\n",
    "print(\"x =\", x)\n",
    "print(\"rank(x) =\", r)\n",
    "print(\"sort(x) =\", s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44649f40-8a76-4695-8565-e285553a96b7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
